apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.triplet.play'

def versionMajor = 0
def versionMinor = 8
def versionPatch = 0

android {
  compileSdkVersion versions.compile_sdk

  defaultConfig {
    applicationId "codes.chrishorner.socketweather"
    minSdkVersion versions.min_sdk
    targetSdkVersion versions.compile_sdk
    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    debug.java.srcDirs += 'src/debug/kotlin'
    release.java.srcDirs += 'src/release/kotlin'
    test.java.srcDirs += 'src/test/kotlin'
  }

  signingConfigs {
    debug {
      storeFile file('keys/debug.keystore')
      storePassword 'android'
      keyAlias 'androiddebugkey'
    }

    release {
      def uploadKey = file('keys/upload.keystore')
      storeFile uploadKey.exists() ? uploadKey : file('keys/debug.keystore')
      storePassword System.getenv("socket_weather_password") ?: 'android'
      keyAlias System.getenv("socket_weather_alias") ?: 'androiddebugkey'
      keyPassword System.getenv("socket_weather_password") ?: 'android'
    }
  }

  buildTypes {
    debug {
      versionNameSuffix '-DEBUG'
      applicationIdSuffix '.debug'
      signingConfig signingConfigs.debug
    }

    release {
      minifyEnabled true
      shrinkResources true
      signingConfig signingConfigs.release
      proguardFiles file('shrinker_rules.pro')
    }
  }

  compileOptions {
    coreLibraryDesugaringEnabled true
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8
    useIR = true
  }

  buildFeatures {
    compose true
  }

  composeOptions {
    kotlinCompilerExtensionVersion versions.compose
  }
  packagingOptions {
    resources {
      excludes += ['**/*.kotlin_metadata', 'META-INF/*.kotlin_module', 'META-INF/*.properties', '/*.properties']
    }
  }

  bundle {
    language {
      enableSplit = false // We currently only have one language.
    }
  }
  lint {
    disable 'InvalidPackage'
  }
}

play {
  serviceAccountCredentials = file('keys/play_access.json')
  defaultToAppBundles = true
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile).all {
  kotlinOptions.freeCompilerArgs += ['-Xopt-in=kotlin.Experimental',
                                     '-Xopt-in=kotlinx.coroutines.FlowPreview',
                                     '-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi',
                                     '-Xopt-in=kotlin.ExperimentalStdlibApi',
                                     '-Xopt-in=kotlin.time.ExperimentalTime',
                                     '-Xopt-in=androidx.compose.material.ExperimentalMaterialApi',
                                     '-Xopt-in=androidx.compose.animation.ExperimentalAnimationApi']
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-reflect:${versions.kotlin}"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"
  implementation "androidx.compose.ui:ui:${versions.compose}"
  implementation "androidx.compose.material:material:${versions.compose}"
  implementation "androidx.compose.material:material-icons-core:${versions.compose}"
  implementation "androidx.compose.material:material-icons-extended:${versions.compose}"
  implementation "androidx.compose.ui:ui-tooling:${versions.compose}"
  implementation "androidx.compose.ui:ui-graphics:${versions.compose}"
  implementation "com.google.accompanist:accompanist-insets:${versions.accompanist}"
  implementation "com.google.accompanist:accompanist-systemuicontroller:${versions.accompanist}"
  implementation "androidx.navigation:navigation-compose:${versions.navigation}"
  implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle}"
  implementation "androidx.appcompat:appcompat:${versions.appcompat}"
  implementation "org.osmdroid:osmdroid-android:${versions.osmdroid}"
  implementation "androidx.glance:glance-appwidget:${versions.glance}"
  implementation "androidx.core:core-ktx:${versions.androidx_core}"
  implementation "androidx.activity:activity-compose:${versions.androidx_activity}"
  implementation "androidx.datastore:datastore:${versions.datastore}"
  debugImplementation "androidx.datastore:datastore-preferences:${versions.datastore}"
  implementation "com.jakewharton.timber:timber:${versions.timber}"
  implementation "com.squareup.leakcanary:leakcanary-object-watcher-android:${versions.leakcanary}"
  debugImplementation "com.squareup.leakcanary:leakcanary-android:${versions.leakcanary}"
  implementation "com.squareup.moshi:moshi:${versions.moshi}"
  implementation "com.squareup.moshi:moshi-kotlin:${versions.moshi}"
  implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
  debugImplementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"
  implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
  debugImplementation "com.squareup.retrofit2:retrofit-mock:${versions.retrofit}"
  implementation "com.squareup.retrofit2:converter-moshi:${versions.retrofit}"
  debugImplementation "com.github.alorma:drawer-base:${versions.debugdrawer}"
  debugImplementation "com.github.alorma:drawer-modules:${versions.debugdrawer}"
  testImplementation "junit:junit:${versions.junit}"
  testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutines}"
  testImplementation "app.cash.turbine:turbine:${versions.turbine}"
  testImplementation "com.google.truth:truth:${versions.truth}"
  testImplementation "com.squareup.okhttp3:mockwebserver:${versions.okhttp}"
  coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:${versions.jdk_desugar}"
}
